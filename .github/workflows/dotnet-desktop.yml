name: build

on:
   push:
    tags:
    - 'V*'
  #push:
  #pull_request:
   # branches: [ main ]
    #paths:
    #- '**.cs'
    #- '**.csproj'

env:
  DOTNET_VERSION: '5.0.301' # The .NET SDK version to use

jobs:
  build:

    name: build-${{matrix.os}}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
    env:
      Solution_Name: StdfParser.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
      #Test_Project_Path: your-test-project-path  


    steps:
    - uses: actions/checkout@v2
    
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dependencies
      run: dotnet restore
      
    - name: Setup Nuget
      run: nuget restore
      
    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
      
    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:rebuild  #/p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}
        #Appx_Bundle: Always
        #Appx_Bundle_Platforms: x64
        
    - name: Create compress file
      run: Compress-Archive ./StdfParser/bin/Debug/* StdrParser.zip
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        #body: |
          #Changes in this Release
          #- First Change
          #- Second Change
        draft: false
        prerelease: false
          
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./StdrParser.zip
        asset_name: StdrParser.zip
        asset_content_type: application/zip
    #- name: Build
     # run: dotnet build --configuration Release --no-restore

